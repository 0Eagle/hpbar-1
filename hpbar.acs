#library "hpbar"
#include "zcommon.acs"

#define HPBAR_HOLDTIME 0.25

#define HUD_WIDTH 800
#define HUD_HEIGHT 600

#define HPBAR_X 400.0
#define HPBAR_Y 40.0
#define NAME_Y (HPBAR_Y + 25.0)
#define INFO_Y (NAME_Y + 12.0)

script "hpbar-enter" enter {
    while (true) {
        ACS_ExecuteAlways(31234, 0);
        delay(1);
    }
}

script 31234 (void) {
    int pn = PlayerNumber();

    if (SetActivator(0, AAPTR_PLAYER_GETTARGET)) {
        int hp = GetActorProperty(0, APROP_Health);
        int max_hp = GetActorProperty(0, APROP_SpawnHealth);
        if (max_hp <= 0) max_hp = hp;
        if (max_hp <= 0) terminate;

        SetActivator(0);
        ACS_ExecuteAlways(31235, 0, pn, hp, max_hp);
    }
}

script 31235 (int player, int hp, int max_hp) clientside {
    if (ConsolePlayerNumber() != player) terminate;

    if (max_hp < GetCVar("hpbar_server_min_maxhp") || max_hp < GetCVar("hpbar_min_maxhp")) terminate;
    int hp_percentage = hp * 100 / max_hp;

    int style = GetCVar("hpbar_style");

    if (style == 1) {
        show_full_hpbar(hp, max_hp, hp_percentage);
    } else if (style == 2) {
        show_minimal_hpbar(hp_percentage);
    }
}

function void show_full_hpbar(int hp, int max_hp, int hp_percentage) {
    SetHudSize(HUD_WIDTH, HUD_HEIGHT, 0);

    SetFont("HPBAR");
    HudMessage(s: "A"; HUDMSG_FADEOUT, 6102, CR_UNTRANSLATED, HPBAR_X, HPBAR_Y, HPBAR_HOLDTIME);

    SetFont("NORMAL");
    HudMessage(d: hp, s: " / ", d: max_hp, s: " (", d: hp_percentage, s: "%)";
               HUDMSG_FADEOUT, 6000, CR_WHITE, HPBAR_X, HPBAR_Y, HPBAR_HOLDTIME);

    for (int i = 0; i <= 100; ++i) {
        if (hp_percentage < 25) {
            SetFont("FILLCRIT");
        } else {
            SetFont("FILLNORM");
        }

        SetHudSize(HUD_WIDTH, HUD_HEIGHT, 0);
        if (i <= hp_percentage)
            HudMessage(s: "A"; HUDMSG_FADEOUT , 6001 + i, CR_UNTRANSLATED, HPBAR_X - 97.0 + to_fixed(i * 2), HPBAR_Y, HPBAR_HOLDTIME);
    }
}

function void show_minimal_hpbar(int hp_percentage) {
    SetHudSize(1280, 960, 0);

    str color_code;
    if (hp_percentage >= 100)
        color_code = "\c[x5]";
    else if (hp_percentage >= 75)
        color_code = "\cd";
    else if (hp_percentage >= 25)
        color_code = "\ck";
    else
        color_code ="\cg";

    SetFont("NORMAL");
    HudMessage(s: color_code, d: hp_percentage, s: "%\c-"; HUDMSG_FADEOUT, 6102, CR_UNTRANSLATED, 640.0, 500.0, 1.0 / 35 + 1, 0.1);
}

script "hpbar-enter-cl" enter clientside {
    while (true) {
        if (GetCVar("hpbar_style") == 1) {
            ACS_ExecuteAlways(31236, 0);
            delay(1);
        } else {
            delay(35);
        }
    }
}

script 31236 (void) clientside {
    if (ConsolePlayerNumber() != PlayerNumber()) terminate;

    if (SetActivator(0, AAPTR_PLAYER_GETTARGET)) {
        int max_hp = GetActorProperty(0, APROP_SpawnHealth);
        if (max_hp < GetCVar("hpbar_server_min_maxhp") || max_hp < GetCVar("hpbar_min_maxhp")) terminate;

        int name = GetActorClass(0);
        bool invul = GetActorProperty(0, APROP_Invulnerable);
        bool friendly = GetActorProperty(0, APROP_Friendly);

        SetActivator(0);

        SetHudSize(HUD_WIDTH, HUD_HEIGHT, 0);
        SetFont("NORMAL");
        HudMessage(s: pp_name(name); HUDMSG_FADEOUT, 6103, CR_WHITE, HPBAR_X, HPBAR_Y + 25.0, HPBAR_HOLDTIME);
        int ln = 0;

        if (invul) {
            HudMessage(s: "\cgInvulnerable\c-"; HUDMSG_FADEOUT, 6104 + ln, CR_WHITE, HPBAR_X, HPBAR_Y + 37.0 + to_fixed(ln * 10), HPBAR_HOLDTIME);
            ++ln;
        }

        if (friendly) {
            HudMessage(s: "\c[x5]Friendly\c-"; HUDMSG_FADEOUT, 6104 + ln, CR_WHITE, HPBAR_X, HPBAR_Y + 37.0 + to_fixed(ln * 10), HPBAR_HOLDTIME);
            ++ln;
        }
    }
}

function int to_fixed(int x) {
    return x << 16;
}

// Return x is a case-insensitive prefix of y
function bool prefix_match(str x, str y) {
    return stricmp(x, y, strlen(y)) == 0;
}

function str pp_name(str name) {
    ////////////////////////////////////////////////////////////////////////////////
    // Complex Doom
    ////////////////////////////////////////////////////////////////////////////////
    if (prefix_match(name, "PlasmaGunner")) {
        return "Plasma Zombie";
    } else if (prefix_match(name, "Railgunner")) {
        return "Railgunner";
    } else if (prefix_match(name, "DemonTechZombie")) {
        return "Demon Tech Zombie";
    } else if (prefix_match(name, "RocketZombie")) {
        return "Rocket Zombie";
    } else if (prefix_match(name, "ShotgunZombie")) {
        return "Shotgunner";
    } else if (prefix_match(name, "AssaultShotgunZombie")) {
        return "Assault Shotgunner";
    } else if (prefix_match(name, "SuperShotgunZombie")) {
        return "Double Barrel Shotgun Zombie";
    } else if (prefix_match(name, "QuadShotgunZombie")) {
        return "Quad Barrel Shotgun Zombie";
    } else if (prefix_match(name, "AssaultRifleZombie")) {
        return "Assault Rifle Zombie";
    // Chaingunner
    // Minigunner
    } else if (prefix_match(name, "BFGZombieman")) {
        return "BFG Zombie";
    // Imp
    } else if (prefix_match(name, "VoidImp")) {
        return "Void Imp";
    // Devil
    } else if (prefix_match(name, "PhaseImp")) {
        return "\ctPhase Imp\c-";
    } else if (prefix_match(name, "BullFiend")) {
        return "Bull Fiend";
    } else if (prefix_match(name, "CyberFiend")) {
        return "Cyber Fiend";
    } else if (prefix_match(name, "MagmaFiend")) {
        return "Magma Fiend";
    } else if (prefix_match(name, "DTechFiend")) {
        return "DTech Fiend";
    } else if (prefix_match(name, "Spectre~")) {
        return pp_name("Spectre");
    // Lurker
    // Spook
    } else if (prefix_match(name, "TerrorSoul")) {
        return "Terror Soul";
    } else if (prefix_match(name, "ForgottenOne")) {
        return "Forgotten One";
    } else if (prefix_match(name, "PoisonSoul")) {
        return "Poison Soul";
    // Rictus
    } else if (prefix_match(name, "Cacodemon~")) {
        return pp_name("Cacodemon");
    // Watcher
    // Cacomental
    } else if (prefix_match(name, "SoulKeeper")) {
        return "Soul Keeper";
    // Defiler
    } else if (prefix_match(name, "PoisonElemental")) {
        return "Poison Elemental";
    } else if (prefix_match(name, "BombElemental")) {
        return "Bomb Elemental";
    // Hectebus
    // Daedabus
    // Behemoth
    // Barbatos
    // Dualachnotron
    // Fusionite
    } else if (prefix_match(name, "BabyDemolisher")) {
        return "Baby Demolisher";
    } else if (prefix_match(name, "BabySentient")) {
        return "Baby Sentient";
    // Guardian
    // Cadaver
    } else if (prefix_match(name, "HellfireRevenant")) {
        return "Hellfire Revenant";
    // Famine
    } else if (prefix_match(name, "HellKnight~")) {
        return pp_name("HellKnight");
    } else if (prefix_match(name, "PyroDemon")) {
        return "Pyro Demon";
    } else if (prefix_match(name, "CyberNoble")) {
        return "Cyber Noble";
    } else if (prefix_match(name, "HellDuke")) {
        return "Hell Duke";
    } else if (prefix_match(name, "BaronOfHell~")) {
        return pp_name("BaronOfHell");
    } else if (prefix_match(name, "BruiserDemon")) {
        return "BruiserDemon";
    // Cybruiser
    // Exile
    // Diabolist
    } else if (prefix_match(name, "DarkHellion")) {
        return "\cmDark Hellion\c-";
    // Demolisher
    } else if (prefix_match(name, "DarkDemolisher")) {
        return "\cqDark Demolisher\c-";
    } else if (prefix_match(name, "CerebralSentient")) {
        return "Cerebral Sentient";
    } else if (prefix_match(name, "CyberLord")) {
        return "Annihilator";
    } else if (prefix_match(name, "DarkCyberdemon")) {
        return "\cqDark Cyberdemon\c-";
    } else if (prefix_match(name, "Cardinal")) {
        return "\cgDark Cardinal\c-";
    } else if (prefix_match(name, "SSNazi")) {
        return "SS Nazi";
    // Mutant
    // Officer
    } else if (prefix_match(name, "NaziDog")) {
        return "Nazi Guard Dog";
    // Hitler
    } else if (prefix_match(name, "HitlerNoSuit")) {
        return "Hitler";
    } else if (prefix_match(name, "DSP")) {
        return "Darksyde Phil";
    } else if (prefix_match(name, "ModdedExplosiveBarrel")) {
        return pp_name("ExplosiveBarrel");
    }

    ////////////////////////////////////////////////////////////////////////////////
    // LCA
    ////////////////////////////////////////////////////////////////////////////////
    if (prefix_match(name, "BFG10KGeneral")) {
        return "BFG10K General";
    } else if (prefix_match(name, "BFGCacodemon")) {
        return "BFG Cacodemon";
    } else if (prefix_match(name, "Cardihilator")) {
        return "\cgCardihilator\c-";
    } else if (prefix_match(name, "CerebralCardinal")) {
        return "\cgCerebral Cardinal\c-";
    // Cydestroyer
    } else if (prefix_match(name, "Arcradimus")) {
        return "Demon Lord Arcradimus";
    } else if (prefix_match(name, "DesertHornet")) {
        return "DesertHornet";
    } else if (prefix_match(name, "DTDevastatorZombie")) {
        return "DT Devastator Zombie";
    } else if (prefix_match(name, "EraserZombie")) {
        return "Eraser Zombie";
    } else if (prefix_match(name, "FreezerBehemoth")) {
        return "Freezer Behemoth";
    } else if (prefix_match(name, "FreezerZombie")) {
        return "Freezer Zombie";
    } else if (prefix_match(name, "LegendaryAnnihilator")) {
        return "\ckLegendary Annihilator\c-";
    } else if (prefix_match(name, "LegendaryAssaultCaptain")) {
        return "\ckLegendary Assault Captain\c-";
    } else if (prefix_match(name, "LegendaryBabySentient")) {
        return "\ckLegendary Baby Sentient\c-";
    } else if (prefix_match(name, "LegendaryBehemoth")) {
        return "\ckLegendary Behemoth\c-";
    } else if (prefix_match(name, "LegendaryCardinal")) {
        return "\ckLegendary Cardinal\c-";
    } else if (prefix_match(name, "LegendaryCommando")) {
        return "\ckLegendary Commando\c-";
    } else if (prefix_match(name, "LegendaryCyberdemon")) {
        return "\ckLegendary Cyberdemon\c-";
    } else if (prefix_match(name, "LegendaryCyberNoble")) {
        return "\ckLegendary Cyber Noble\c-";
    } else if (prefix_match(name, "LegendaryFiend")) {
        return "\ckLegendary Fiend\c-";
    } else if (prefix_match(name, "LegendaryHellKnight")) {
        return "\ckLegendary Hell Knight\c-";
    } else if (prefix_match(name, "LegendaryImp")) {
        return "\ckLegendary Imp\c-";
    } else if (prefix_match(name, "LegendaryRedeemer")) {
        return "\ckLegendary Redeemer\c-";
    } else if (prefix_match(name, "LegendaryRevenant")) {
        return "\ckLegendary Revenant\c-";
    } else if (prefix_match(name, "LegendarySentient")) {
        return "\ckLegendary Sentient\c-";
    } else if (prefix_match(name, "LegendaryStealthTrooper")) {
        return "\ckLegendary Stealth Trooper\c-";
    } else if (prefix_match(name, "LegZombie")) {
        return "\ckLegendary Zombie\c-";
    } else if (prefix_match(name, "PhaseOverlord")) {
        return "Phase Overlord";
    } else if (prefix_match(name, "SandSpirit")) {
        return "Sand Spirit";
    } else if (prefix_match(name, "ShotgunCommando")) {
        return "Shotgun Commando";
    } else if (prefix_match(name, "TrueLegendaryCyberdemon")) {
        return "\chTrue \ckLegendary Cyberdemon\c-";
    } else if (prefix_match(name, "TrueLegendaryCardinal")) {
        return "\chTrue \ckLegendary Cardinal\c-";
    } else if (prefix_match(name, "Velocirator")) {
        return "\cdVelocirator\c-";

    // lca's edited complex monsters
    } else if (prefix_match(name, "NewBabySentient")) {
        return pp_name("BabySentient");
    } else if (prefix_match(name, "NewBehemoth")) {
        return pp_name("Behemoth");
    } else if (prefix_match(name, "NewCerebralSentient")) {
        return pp_name("CerebralSentient");
    }


    ////////////////////////////////////////////////////////////////////////////////
    // Random Monsters
    ////////////////////////////////////////////////////////////////////////////////
    // Abaddon
    // Afrit
    if (prefix_match(name, "BabyDDemolisher")) {
        return "Baby Dark Demolisher";
    // Demobus
    } else if (prefix_match(name, "BFGMastermind")) {
        return "BFG Mastermind";
    } else if (prefix_match(name, "CacoLich")) {
        return "Cacolich";
    } else if (prefix_match(name, "CerebralCommander")) {
        return "\cgCerebral Commander\c-";
    } else if (prefix_match(name, "ChaingunFiend")) {
        return "Chaingun Fiend";
    } else if (prefix_match(name, "CorruptedCyberLord")) {
        return "\cnCorrupted Annihilator\c-";
    } else if (prefix_match(name, "CryoDemon")) {
        return "Cyro Demon";
    } else if (prefix_match(name, "CryoImp")) {
        return "Cyro Imp";
    } else if (prefix_match(name, "DTShotgunZombie")) {
        return "Demon Tech Shotgunner";
    } else if (prefix_match(name, "DTechSpider")) {
        return "Demon Tech Spider";
    } else if (prefix_match(name, "DemonTechTrooper")) {
        return "Demon Tech Trooper";
    } else if (prefix_match(name, "EMinigunner")) {
        return "Explosive Minigunner";
    } else if (prefix_match(name, "SSRocketMan")) {
        return "SS Rocket Man";
    } else if (prefix_match(name, "SSSuperSolider")) {
        return "SS Super Solider";
    } else if (prefix_match(name, "HellArchon")) {
        return "Hell Archon";
    } else if (prefix_match(name, "HellFireBaron")) {
        return "Hellfire Baron";
    } else if (prefix_match(name, "HellFireCyberdemon")) {
        return "\cgHellfire Cyberdemon\c-";
    } else if (prefix_match(name, "HomingRocketZombie")) {
        return "Homing Rocket Zombie";
    } else if (prefix_match(name, "ImpLord")) {
        return "Imp Lord";
    // Infected
    } else if (prefix_match(name, "SuicideBomber")) {
        return "Suicide Bomber";
    } else if (prefix_match(name, "KSBehemoth")) {
        return pp_name("Behemoth");
    } else if (prefix_match(name, "NewBarbatos")) {
        return pp_name("Barbatos");
    } else if (prefix_match(name, "PhaseElemental")) {
        return "\ctPhaseElemental\c-";
    } else if (prefix_match(name, "PhaseSoul")) {
        return "\ctPhase Soul\c-";
    } else if (prefix_match(name, "PhaseWarlord")) {
        return "\ctPhase Warlord\c-";
    } else if (prefix_match(name, "PistolZombie")) {
        return "Pistol Zombie";
    } else if (prefix_match(name, "ProtoDestroyer")) {
        return "Proto-Destroyer";
    } else if (prefix_match(name, "PyroImp")) {
        return "Pyro Imp";
    } else if (prefix_match(name, "Terminator2")) {
        return "Terminator";
    } else if (prefix_match(name, "ToxicImp")) {
        return "Toxic Imp";
    } else if (prefix_match(name, "ToxicLord")) {
        return "Toxic Lord";
    } else if (prefix_match(name, "WidowMaker")) {
        return "Widow Maker";
    }

    ////////////////////////////////////////////////////////////////////////////////
    // HAF
    ////////////////////////////////////////////////////////////////////////////////
    if (prefix_match(name, "DementedTerminator")) {
        return "\cgDemented Terminator\c-";
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Ark
    ////////////////////////////////////////////////////////////////////////////////
    if (prefix_match(name, "Complex Cardinal")) {
        return pp_name("Cardinal");
    } else if (prefix_match(name, "BlueCardinal")) {
        return "\cnCorrupted Cardinal\c-";
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Insane LCA
    ////////////////////////////////////////////////////////////////////////////////
    if (prefix_match(name, "EnragedLegZombie")) {
        return "\cgEnraged\c- \ckLegendary Zombie\c-";
    } else if (prefix_match(name, "EnragedLegendaryImp")) {
        return "\cgEnraged\c- \ckLegendary Imp\c-";
    } else if (prefix_match(name, "EnragedLegendaryAssaultCaptain")) {
        return "\cgEnraged\c- \ckLegendary Assault Captain\c-";
    } else if (prefix_match(name, "EnragedLegendaryRevenant")) {
        return "\cgEnraged\c- \ckLegendary Revenant\c-";
    }

    ////////////////////////////////////////////////////////////////////////////////
    // RGA2
    ////////////////////////////////////////////////////////////////////////////////

    if (prefix_match(name, "DrDude")) {
        return "Scientist";
    } else if (prefix_match(name, "SuperShotgunGuy")) {
        return "Super Shotgun Guy";
    } else if (prefix_match(name, "DoubleChaingunGuy")) {
        return "Elite Commando";
    } else if (prefix_match(name, "GrenadeGuy")) {
        return "Grenadier";
    } else if (prefix_match(name, "ZombieMarine")) {
        return "Corrupted Marine";
    } else if (prefix_match(name, "SpaceNazi")) {
        return "Space Nazi";
    } else if (prefix_match(name, "UziGuy")) {
        return "Nazi Collaborator";
    } else if (prefix_match(name, "RGAScriptedMarine")) {
        return "Marine Traitor";
    } else if (prefix_match(name, "DarkImp")) {
        return "Blood Imp";
    } else if (prefix_match(name, "ImpBoy")) {
        return "Imp Trooper";
    } else if (prefix_match(name, "BloodDemon")) {
        return "Blood Demon";
    } else if (prefix_match(name, "StoneDemon")) {
        return "Stone Demon";
    } else if (prefix_match(name, "SpectreStone")) {
        return "Stone Spectre";
    } else if (prefix_match(name, "SpectreBlood")) {
        return "Blood Spectre";
    } else if (prefix_match(name, "KamikazeSoul")) {
        return "Damned Soul";
    } else if (prefix_match(name, "KamikazePainElemental")) {
        return "Kamikaze Pain Elemental";
    } else if (prefix_match(name, "Cacolantern")) {
        return "Cacolantern";
    } else if (prefix_match(name, "BlueCacodemon")) {
        return "Bluodemon";
    } else if (prefix_match(name, "Abaddon")) {
        return "Abaddon";
    } else if (prefix_match(name, "StoneAbaddon")) {
        return "Ascended Cacodemon";
    } else if (prefix_match(name, "GreenRevenant")) {
        return "Assault Revenant";
    } else if (prefix_match(name, "GoldRevenant")) {
        return "Sniper Revenant";
    } else if (prefix_match(name, "BlueRevenant")) {
        return "Revenant Lord";
    } else if (prefix_match(name, "SuperRevenant")) {
        return "Revenant God";
    } else if (prefix_match(name, "SpectreHellKnight")) {
        return "Hell Spectre";
    } else if (prefix_match(name, "StoneKnight")) {
        return "Stone Knight";
    } else if (prefix_match(name, "Belphegor")) {
        return "Belphegor";
    } else if (prefix_match(name, "Cybruiser")) {
        return "Cybruiser";
    } else if (prefix_match(name, "SpectreArachnotron")) {
        return "Arachnospectre";
    } else if (prefix_match(name, "Augnotron")) {
        return "Augnotron";
    } else if (prefix_match(name, "Hectebus")) {
        return "Hectebus";
    } else if (prefix_match(name, "Acubus")) {
        return "Acubus";
    } else if (prefix_match(name, "Deathvile")) {
        return "Deathvile";
    } else if (prefix_match(name, "ArachnidOverlord")) {
        return "Arachnid Overlord";
    } else if (prefix_match(name, "Cyberlord")) {
        return "Cyberlord";
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Original Doom Monsters (fallback)
    ////////////////////////////////////////////////////////////////////////////////

    // Doom
    if (prefix_match(name, "ZombieMan")) {
        return "Former Human";
    } else if (prefix_match(name, "ShotgunGuy")) {
        return "Former Human Sergeant";
    } else if (prefix_match(name, "DoomImp")) {
        return "Imp";
    } else if (prefix_match(name, "Demon")) {
        return "Demon";
    } else if (prefix_match(name, "Spectre")) {
        return "Spectre";
    } else if (prefix_match(name, "LostSoul")) {
        return "Lost Soul";
    } else if (prefix_match(name, "Cacodemon")) {
        return "Cacodemon";
    } else if (prefix_match(name, "BaronOfHell")) {
        return "Baron Of Hell";
    } else if (prefix_match(name, "Cyberdemon")) {
        return "Cyberdemon";
    } else if (prefix_match(name, "SpiderMastermind")) {
        return "Spider Mastermind";

    // Doom 2
    } else if (prefix_match(name, "ChaingunGuy")) {
        return "Heavy Weapon Dude";
    } else if (prefix_match(name, "HellKnight")) {
        return "Hell Knight";
    } else if (prefix_match(name, "Revenant")) {
        return "Revenant";
    } else if (prefix_match(name, "Fatso")) {
        return "Mancubus";
    } else if (prefix_match(name, "Arachnotron")) {
        return "Arachnotron";
    } else if (prefix_match(name, "PainElemental")) {
        return "Pain Elemental";
    } else if (prefix_match(name, "Archvile")) {
        return "Arch-vile";
    } else if (prefix_match(name, "WolfensteinSS")) {
        return "Wolfenstein SS";
    } else if (prefix_match(name, "CommanderKeen")) {
        return "Commander Keen";
    } else if (prefix_match(name, "BossBrain")) {
        return "John Romero";
    } else if (prefix_match(name, "ExplosiveBarrel")) {
        return "\cgExplosive Barrel\c-";
    // DOGE!
    } else if (prefix_match(name, "MBFHelperDog")) {
        return "\c[c5]DOGE\c-";
    }

    return name;
}
