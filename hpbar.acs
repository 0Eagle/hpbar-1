#library "hpbar"
#include "zcommon.acs"

#define STYLE_FULL    1
#define STYLE_MINIMAL 2

#define FULL_HUD_WIDTH  800
#define FULL_HUD_HEIGHT 600
#define FULL_HOLDTIME 0.25
#define FULL_HPBAR_X 400.0
#define FULL_HPBAR_Y 40.0
#define FULL_NAME_Y  (FULL_HPBAR_Y + 25.0)
#define FULL_INFO_Y  (FULL_NAME_Y + 12.0)

#define MINIMAL_HUD_WIDTH  1280
#define MINIMAL_HUD_HEIGHT 960
#define MINIMAL_HOLDTIME ((1.0 / 35) + 1)
#define MINIMAL_FADETIME 0.1
#define MINIMAL_HP_X 640.0
#define MINIMAL_HP_Y 500.0

script "hpbar-enter" enter {
    if (GetCVar("hpbar_rekt")) SetThingSpecial(0, ACS_ExecuteAlways, 31241);

    while (true) {
        ACS_NamedExecuteAlways("hpbar-get-target", 0);
        delay(1);
    }
}

script "hpbar-get-target" (void) {
    int pn = PlayerNumber();

    int old_tid = PickActor(0, GetActorAngle(0), GetActorPitch(0), 8192.0, 0, MF_SHOOTABLE, ML_BLOCKEVERYTHING | ML_BLOCKHITSCAN, PICKAF_RETURNTID);
    int new_tid = UniqueTID();

    if (PickActor(0, GetActorAngle(0), GetActorPitch(0), 8192.0, new_tid, MF_SHOOTABLE, ML_BLOCKEVERYTHING | ML_BLOCKHITSCAN, PICKAF_FORCETID)) {
        SetActivator(new_tid);
        int hp = GetActorProperty(0, APROP_Health);
        int max_hp = GetActorProperty(0, APROP_SpawnHealth);
        if (max_hp <= 0) max_hp = hp;
        if (max_hp > 0) {
            if (max_hp >= GetCVar("hpbar_threshold")) {
                SetCVarString(strparam(s: "hpbar_target_name", d: pn), get_actor_name(0));
                ACS_ExecuteAlways(31234, 0, pn, hp, max_hp);
            }

            if (GetCVar("hpbar_tracker")) {
                ACS_ExecuteAlways(31235, 0);
            }
        }

        Thing_ChangeTID(new_tid, old_tid);
    }
}

script 31234 (int player, int hp, int max_hp) clientside {
    if (ConsolePlayerNumber() != player) terminate;

    int hp_percentage = hp * 100 / max_hp;

    str name = GetCVarString(strparam(s: "hpbar_target_name", d: ConsolePlayerNumber()));
    bool invul = GetActorProperty(0, APROP_Invulnerable);
    bool friendly = GetActorProperty(0, APROP_Friendly);

    if (friendly && !GetUserCVar(ConsolePlayerNumber(), "hpbar_show_friendly")) terminate;

    int style = GetUserCVar(ConsolePlayerNumber(), "hpbar_style");
    if (style == STYLE_FULL) {
        show_full_hpbar(hp, max_hp, hp_percentage);

        SetHudSize(FULL_HUD_WIDTH, FULL_HUD_HEIGHT, true);
        SetFont("NORMAL");
        HudMessageBold(s: name; HUDMSG_FADEOUT, 6103, CR_WHITE, FULL_HPBAR_X, FULL_NAME_Y, FULL_HOLDTIME);
        int ln = 0;

        if (invul) {
            HudMessageBold(s: "\c[i8]Invulnerable\c-"; HUDMSG_FADEOUT, 6104 + ln, CR_WHITE, FULL_HPBAR_X, FULL_INFO_Y + to_fixed(ln * 10), FULL_HOLDTIME);
            ++ln;
        }

        if (friendly) {
            HudMessageBold(s: "\c[x5]Friendly\c-"; HUDMSG_FADEOUT, 6104 + ln, CR_WHITE, FULL_HPBAR_X, FULL_INFO_Y + to_fixed(ln * 10), FULL_HOLDTIME);
            ++ln;
        }
    } else if (style == STYLE_MINIMAL) {
        show_minimal_hpbar(hp_percentage);
    }
}

function void show_full_hpbar(int hp, int max_hp, int hp_percentage) {
    SetHudSize(FULL_HUD_WIDTH, FULL_HUD_HEIGHT, true);

    SetFont("NORMAL");
    HudMessageBold(d: hp, s: " / ", d: max_hp, s: " (", d: hp_percentage, s: "%)";
                   HUDMSG_FADEOUT, 6000, CR_WHITE, FULL_HPBAR_X, FULL_HPBAR_Y, FULL_HOLDTIME);

    if (hp_percentage < 25)
        SetFont("FILLCRIT");
    else if (hp_percentage < 50)
        SetFont("FILLDAMG");
    else
        SetFont("FILLNORM");

    for (int i = 0; i <= 100 && i <= hp_percentage; ++i) {
        HudMessageBold(s: "A"; HUDMSG_FADEOUT , 6001 + i, CR_UNTRANSLATED, FULL_HPBAR_X - 97.0 + to_fixed(i * 2), FULL_HPBAR_Y, FULL_HOLDTIME);
    }

    SetFont("HPBAR");
    HudMessageBold(s: "A"; HUDMSG_FADEOUT, 6102, CR_UNTRANSLATED, FULL_HPBAR_X, FULL_HPBAR_Y, FULL_HOLDTIME);
}

function str hpp_to_color(int p) {
    if (p >= 100)
        return "\c[x5]";
    else if (p >= 75)
        return "\c[a6]";
    else if (p >= 50)
        return "\ck";
    else if (p >= 25)
        return "\c[o4]";

    return "\cr";
}

function void show_minimal_hpbar(int hp_percentage) {
    SetHudSize(MINIMAL_HUD_WIDTH, MINIMAL_HUD_HEIGHT, false);

    SetFont("NORMAL");
    HudMessageBold(s: hpp_to_color(hp_percentage), d: hp_percentage, s: "%\c-";
                   HUDMSG_FADEOUT, 6000, CR_UNTRANSLATED, MINIMAL_HP_X, MINIMAL_HP_Y, MINIMAL_HOLDTIME, MINIMAL_FADETIME);
}

#define MAX_TRACKERS 32
#define NUM_RANKINGS 10
// This should be -1, but Zandronum 2.1.2 has a bug where ACS_ExecuteAlways would send -1 as 255! WTF?!!!
#define INVALID_TID (-129)

int tracked_tids[MAX_TRACKERS];
int tracked_hps[MAX_TRACKERS];
int tracked_max_hps[MAX_TRACKERS];
bool tracked_invul[MAX_TRACKERS];
int tracked_kills[MAX_TRACKERS];

script "hpbar-open" open {
    for (int i = 0; i < MAX_TRACKERS; ++i) {
        tracked_tids[i] = INVALID_TID;
    }
}

script 31235 (void) {
    // We only track monsters. :)
    if (!(ClassifyActor(0) & ACTOR_MONSTER)) terminate;

    // Should we track it?
    if (GetActorProperty(0, APROP_SpawnHealth) < GetCVar("hpbar_tracker_threshold") && !is_boss(GetActorClass(0))) terminate;

    // Give it a new TID if it doesn't have one.
    int tid = ActivatorTID();
    if (tid == 0) {
        tid = UniqueTID(0, 0);
        Thing_ChangeTID(0, tid);
    }

    // Find an empty slot for this monster and check if it is already tracked.
    int i;
    for (int j = MAX_TRACKERS - 1; j >= 0; --j) {
        if (tracked_tids[j] == tid) {
            terminate; // already tracked by another script
        } else if (tracked_tids[j] == INVALID_TID) {
            i = j;
        }
    }

    // Add tid to the slot and tell clients to track this activator.
    tracked_tids[i] = tid;
    ACS_ExecuteAlways(31236, 0, i, tracked_tids[i]);

    tracked_max_hps[i] = GetActorProperty(0, APROP_SpawnHealth);
    str name_cvar = strparam(s: "hpbar_tracked_names", d: i);

    // Keep updating clients the HP and name of the monster while it is alive.
    while (ClassifyActor(0) & ACTOR_ALIVE) {
        // Send monster HP
        int old_hp = tracked_hps[i];
        int old_kills = tracked_kills[i];
        tracked_hps[i] = GetActorProperty(0, APROP_Health);
        tracked_kills[i] = CheckInventory("MonsterScore");
        if (old_hp != tracked_hps[i] || old_kills != tracked_kills[i]) {
            ACS_ExecuteAlways(31237, 0, i, tracked_hps[i], tracked_kills[i]);
        }

        bool old_invul = tracked_invul[i];
        tracked_invul[i] = GetActorProperty(0, APROP_Invulnerable);
        if (old_invul != tracked_invul[i]) {
            ACS_ExecuteAlways(31238, 0, i, tracked_invul[i]);
        }

        // Send name of monster
        str old_name = GetCVarString(name_cvar);
        str name = get_actor_name(0);
        if (old_name == 0 || !streq(old_name, name)) {
            SetCVarString(name_cvar, name);
        }

        delay(1);
    }

    // The monster is dead, remove it from the slot and tell clients to stop tracking it.
    tracked_tids[i] = INVALID_TID;
    SetCVarString(strparam(s: "hpbar_tracked_names", d: i), "");
    ACS_ExecuteAlways(31236, 0, i, INVALID_TID);
}

script 31236 (int i, int tid) clientside {
    if (tid == INVALID_TID) {
        tracked_tids[i] = tid;
    } else {
        if (ClassifyActor(0) & ACTOR_ALIVE) {
            tracked_tids[i] = tid;
            tracked_max_hps[i] = GetActorProperty(0, APROP_SpawnHealth);
        } else {
            tracked_tids[i] = INVALID_TID;
        }
    }
}

script 31237 (int i, int hp, int kills) clientside {
    tracked_hps[i] = hp;
    tracked_kills[i] = kills;
}

script 31238 (int i, int invul) clientside {
    tracked_invul[i] = invul;
}

script 31239 (void) net {
    for (int i = 0; i < MAX_TRACKERS; ++i) {
        int tid = tracked_tids[i];
        if (tid != INVALID_TID) {
            SetActivator(tid);
            SetCVarString(strparam(s: "hpbar_tracked_names", d: i), get_actor_name(0));
            ACS_ExecuteAlways(31236, 0, i, tid);
            ACS_ExecuteAlways(31237, 0, i, tracked_hps[i], tracked_kills[i]);
        }
    }
}

function void request_broadcast_tracker_info(void) {
    RequestScriptPuke(31239, 0, 0, 0);
}

int maxhp_rankings[NUM_RANKINGS];

function bool already_selected(int x, int n) {
    for (int i = 0; i < n; ++i) {
        if (x == maxhp_rankings[i]) {
            return true;
        }
    }

    return false;
}

function int align_left(int x) {
    if (x >= 0) {
        return to_fixed(x) + 0.1;
    }

    return to_fixed(x) - 0.1;
}

function int align_right(int x) {
    if (x >= 0) {
        return to_fixed(x) + 0.2;
    }

    return to_fixed(x) - 0.2;
}

#define TRACKER_HUD_WIDTH  1024
#define TRACKER_HUD_HEIGHT 768

script 31240 open clientside {
    for (int i = 0; i < MAX_TRACKERS; ++i) {
        tracked_tids[i] = INVALID_TID;
    }

    request_broadcast_tracker_info();

    SetHudSize(TRACKER_HUD_WIDTH, TRACKER_HUD_HEIGHT, false);
    while (true) {
        if (!GetCVar("hpbar_tracker")) { delay(35); continue; }
        int x = to_int((GetCVar("hpbar_tracker_x") - 0.5) * GetScreenWidth() / GetScreenHeight() * TRACKER_HUD_HEIGHT) + (TRACKER_HUD_WIDTH / 2);
        int y = to_fixed(to_int((GetCVar("hpbar_tracker_y") - 0.5) * GetScreenHeight()) + (TRACKER_HUD_HEIGHT / 2));
        for (int rank = 0; rank < NUM_RANKINGS; ++rank) {
            int hp_limit = 0;
            int maxhp_limit = 0;

            maxhp_rankings[rank] = -1;

            for (i = 0; i < MAX_TRACKERS; ++i) {
                int tid = tracked_tids[i];
                if (tid != INVALID_TID) {
                    if (already_selected(i, rank)) continue;

                    int max_hp = tracked_max_hps[i];
                    int hp = tracked_hps[i];
                    if (max_hp > maxhp_limit) {
                        maxhp_rankings[rank] = i;
                        maxhp_limit = max_hp;
                        hp_limit = hp;
                    } else if (max_hp == maxhp_limit && hp > hp_limit) {
                        maxhp_rankings[rank] = i;
                        hp_limit = hp;
                    }
                }
            }

            int n = maxhp_rankings[rank];
            if (n == -1) break;

            hp = tracked_hps[n];
            max_hp = tracked_max_hps[n];
            int hpp = hp * 100 / max_hp;
            str name = GetCVarString(strparam(s: "hpbar_tracked_names", d: n));
            HudMessage(s: hpp_to_color(hpp), d: hp, s: "/", d: max_hp, s: "\c-";
                       HUDMSG_FADEOUT, 7000 + rank, CR_WHITE, align_right(x + 80), y + rank * 12.0, 1.0 / 35 + 1, 0.1);
            HudMessage(s: hpp_to_color(hpp), d: hpp, s: "%\c-";
                       HUDMSG_FADEOUT, 7000 + NUM_RANKINGS + rank, CR_WHITE, align_right(x + 120), y + rank * 12.0, 1.0 / 35 + 1, 0.1);

            str invulmsg = "";
            if (tracked_invul[n])
                invulmsg = " \c[i8][INVUL]\c-";

            str killsmsg = "";
            if (GetCVar("hpbar_rekt")) {
                int kills = tracked_kills[n];
                if (kills == 1) {
                    killsmsg = " \cm(1 rekt)\c-";
                } else if (kills >= 2 && kills < 5) {
                    killsmsg = strparam(s: " \cr(", d: kills, s: " rekts)\c-");
                } else if (kills >= 5 && kills < 10) {
                    killsmsg = strparam(s: " \cg(", d: kills, s: " rekts)\c-");
                } else if (kills >= 10) {
                    killsmsg = strparam(s: " \c[a6](", d: kills, s: " rekts)\c-");
                }
            }

            HudMessage(s: name, s: killsmsg, s: invulmsg;
                       HUDMSG_FADEOUT, 7000 + NUM_RANKINGS * 2 + rank, CR_WHITE, align_left(x + 132), y + rank * 12.0, 1.0 / 35 + 1, 0.1);
        }

        delay(1);
    }
}

int announcers_playing = 0;
bool firstblood = false;

script "hpbar-respawn" respawn {
    if (GetCVar("hpbar_rekt")) {
        SetThingSpecial(0, ACS_ExecuteAlways, 31241);
    }
}

script 31241 (void) {
    if (GetCVar("hpbar_tracker")) ACS_ExecuteAlways(31235, 0);

    GiveInventory("MonsterScore", 1); // Total score
    GiveInventory("MonsterScoreTemporary", 1); // Temporary score

    int score = CheckInventory("MonsterScore");
    int score_temp = CheckInventory("MonsterScoreTemporary");

    ACS_ExecuteAlways(31242, 0, score, score_temp);

    if (!firstblood) {
        announce("hpbar/firstblood", "\c[d4]FIRST BLOOD\c-", get_actor_name(0), "First kill on the map");
        firstblood = true;
    }

    // Wait for 5 seconds. If the monster didn't score other kills in the mean time, reset its temporary score.
    delay(35 * 5);
    if (CheckInventory("MonsterScoreTemporary") == score_temp) {
        TakeInventory("MonsterScoreTemporary", score_temp);
    }
}

script 31242 (int score, int score_temp) {
    if (!(ClassifyActor(0) & ACTOR_MONSTER)) terminate;

    if (score_temp == 2) {
        announce("hpbar/doublekill", "\c[d4]DOUBLE KILL\c-", get_actor_name(0), "2 consecutive kills");
    } else if (score_temp == 3) {
        announce("hpbar/multikill", "\c[d4]MULTI KILL\c-", get_actor_name(0), "3 consecutive kills");
    } else if (score_temp == 4) {
        announce("hpbar/megakill", "\c[d4]MEGA KILL\c-", get_actor_name(0), "4 consecutive kills");
    } else if (score_temp == 5) {
        announce("hpbar/ultrakill", "\c[d4]ULTRA KILL\c-", get_actor_name(0), "5 consecutive kills");
    } else if (score_temp == 6) {
        announce("hpbar/monsterkill", "\c[d4]M-M-MONSTER KILL!\c-", get_actor_name(0), "6 consecutive kills");
    } else if (score_temp == 7) {
        announce("hpbar/ludicrouskill", "\c[d4]L U D I C R O U S  K I L L !\c-", get_actor_name(0), "7 consecutive kills");
    } else if (score_temp == 8 || score_temp == 9) {
        announce("hpbar/holyshit", "\c[m6]! ! ! H O L Y  S H I T ! ! !\c-", get_actor_name(0), strparam(d: score_temp, s: " consecutive kills"));
    } else if (score_temp >= 10) {
        announce("hpbar/sexyholyshit", "\c[m6]! ! ! H O L Y  S H I T ! ! !\c-", get_actor_name(0), strparam(d: score_temp, s: " consecutive kills"));
    }

    // Wait until nothing is playing.
    while (announcers_playing > 0) delay(1);

    // Skip the announcement if the monster has gained another tier during the wait.
    if (score == 3 && CheckInventory("MonsterScore") < 5) {
        announce("hpbar/killingspree", "\c[l5]KILLING SPREE\c-", get_actor_name(0), "3 total kills");
    } else if (score == 5 && CheckInventory("MonsterScore") < 8) {
        announce("hpbar/rampage", "\c[l5]RAMPAGE\c-", get_actor_name(0), "5 total kills");
    } else if (score == 8 && CheckInventory("MonsterScore") < 10) {
        announce("hpbar/dominating", "\c[d4]DOMINATING\c-", get_actor_name(0), "8 total kills");
    } else if (score == 10 && CheckInventory("MonsterScore") < 15) {
        announce("hpbar/unstoppable", "\c[k9]UNSTOPPABLE\c-", get_actor_name(0), "10 total kills");
    } else if (score == 15 && CheckInventory("MonsterScore") < 25) {
        announce("hpbar/godlike", "\c[k9]G O D L I K E !\c-", get_actor_name(0), "15 total kills");
    } else if (score == 25) {
        announce("hpbar/wickedsick", "\c[n3]W I C K E D  S I C K !\c-", get_actor_name(0), "25 total kills");
    }
}

script 31243 (void) clientside {
    if (!GetUserCVar(ConsolePlayerNumber(), "hpbar_announcer")) terminate;

    str sound = GetCVarString("hpbar_announcer_sound");
    str bigtext = GetCVarString("hpbar_announcer_bigtext");
    str smalltext = GetCVarString("hpbar_announcer_smalltext");
    str tinytext = GetCVarString("hpbar_announcer_tinytext");

    StopSound(0, 5);
    StopSound(0, 6);
    StopSound(0, 7);
    PlaySound(0, sound, 5 | CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
    PlaySound(0, sound, 6 | CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
    PlaySound(0, sound, 7 | CHAN_NOPAUSE, 1.0, false, ATTN_NONE);

    SetHudSize(800, 600, true);
    SetFont("SMALLFONT");
    HudMessageBold(s: smalltext; HUDMSG_FADEOUT, 7100, CR_WHITE, 400.0, 125.2, 5.0, 0.5);
    HudMessageBold(s: tinytext; HUDMSG_FADEOUT, 7102, CR_WHITE, 400.0, 150.1, 5.0, 0.5);
    SetHudSize(640, 480, true);
    SetFont("BIGFONT");
    HudMessageBold(s: bigtext; HUDMSG_FADEOUT, 7101, CR_UNTRANSLATED, 320.0, 104.1, 5.0, 0.5);
}

script 31244 (void) {
    delay(35 * 3);
    announcers_playing -= 1;
}

function void announce(str sound, str bigtext, str smalltext, str tinytext) {
    // Increment here so the it is seen within the same tic.
    announcers_playing += 1;

    SetCVarString("hpbar_announcer_sound", sound);
    SetCVarString("hpbar_announcer_bigtext", bigtext);
    SetCVarString("hpbar_announcer_smalltext", smalltext);
    SetCVarString("hpbar_announcer_tinytext", tinytext);
    ACS_ExecuteAlways(31243, 0);
    ACS_ExecuteAlways(31244, 0);
}

function int to_fixed(int x) {
    return x << 16;
}

function int to_int(int x) {
    return x >> 16;
}

function str ccunescape_impl(str s, int n) {
    for (int i = n; i < strlen(s); ++i) {
        if (i < strlen(s) - 1 && GetChar(s, i) == '\\' && GetChar(s, i + 1) == 'c') {
            return strparam(s: strmid(s, n, i - n), s: "\c", s: ccunescape_impl(s, i + 2));
        }
    }

    return strmid(s, n, 99999);
}

function str ccunescape(str s) {
    return ccunescape_impl(s, 0);
}

function str get_actor_name(int tid) {
    if (tid == 0 && ClassifyActor(tid) & ACTOR_PLAYER) {
        return strparam(n: 0);
    }

    str class = GetActorClass(tid);
    str name = GetCVarString(strparam(s: "hpbar_name_", s: class));
    if (name != 0) {
        return ccunescape(name);
    }

    name = GetCVarString(strparam(s: "hpbar_name_", s: normalize_class(class)));
    if (name != 0) {
        return ccunescape(name);
    }

    return ccunescape(GetActorProperty(tid, APROP_NameTag));
}

// Ideally, we should check whether the BOSS flag is set on the actor, but it isn't supported in Zandronum 2.1.2 yet. So we simply whitelist most common bosses in popular WADs.
function bool is_boss(str class) {
    bool boss = GetCVar(strparam(s: "hpbar_track_", s: class));
    if (boss == 1) {
        return true;
    } else if (boss == -1) {
        return false;
    }

    boss = GetCVar(strparam(s: "hpbar_track_", s: normalize_class(class)));
    if (boss) {
        return true;
    } else if (boss == -1) {
        return false;
    }

    return false;
}

function bool streq(str x, str y) {
    return strcmp(x, y) == 0;
}

function str normalize_class(str class) {
    // These can't be declared as cvars due to special characters, so we special case them here:
    if (streq(class, "Spectre~")) { return "Spectre"; }
    if (streq(class, "Cacodemon~")) { return "Cacodemon"; }
    if (streq(class, "HellKnight~")) { return "HellKnight"; }
    if (streq(class, "BaronOfHell~")) { return "BaronOfHell"; }
    if (streq(class, "Hexa-ShotgunZombie")) { return "HexaShotgunZombie"; }
    if (streq(class, "LegendaryCyberNoble~")) { return "LegendaryCyberNoble"; }

    // HEM
    if (streq(class, "Hades-TechZombie")) { return "HadesTechZombie"; }

    str s = GetCVarString(strparam(s: "hpbar_map_", s: class));
    if (s != 0) {
        return s;
    }

    return class;
}

// vim: set ft=c:
